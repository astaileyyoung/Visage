#!/usr/bin/env python3


import logging
import subprocess as sp
from pathlib import Path 
from argparse import ArgumentParser 


recognition_model_url = "https://huggingface.co/astaileyyoung/facenet-dynamic/resolve/main/facenet-dynamic.trt?download=true"
detection_model_url = "https://huggingface.co/astaileyyoung/yolov11m-face-dynamic/resolve/main/yolov11m-face-dynamic.trt?download=true"


def load_models(detection_model='/app/models/yolov11m-dynamic.trt',
                recognition_model='/app/models/facenet-dynamic.trt'):
    if not Path('/app/models').exists():
        Path('/app/models').mkdir()

    if not Path(detection_model).exists():
        command = ["wget", detection_model_url]
        sp.run(command)
        command = ["mv", "yolov11m-face-dynamic.trt", "/app/models/"]
        sp.run(command)
    
    if not Path(recognition_model).exists():
        command = ["wget", recognition_model_url]
        sp.run(command)
        command = ["mv", "facenet-dynamic.trt", "/app/models/"]
        sp.run(command)


def main(args):
    if not Path(args.src).exists():
        logging.error(f'{args.src} does not exist. Exiting.')
        exit()
    elif Path(args.src).suffix not in ('.mp4', '.mkv', '.m4v', '.avi', '.mov'):
        logging.warning(f'{Path(args.src).suffix} is not a valid file extension')

    if args.dst is not None and not Path(args.dst).parent.exists():
        Path(args.dst).parent.mkdir(parents=True)

    load_models()

    command = [
        "/app/bin/visage",
        str(args.src),
        "dummy" if args.dst is None else str(args.dst),
        str(args.frameskip),
        str(args.log_level)
    ]
    if args.show:
        command.append("-show")
        logging.debug()
    sp.run(command)


if __name__ == '__main__':
    ap = ArgumentParser()
    ap.add_argument('src')
    ap.add_argument('--dst', default=None, type=str)
    ap.add_argument('--frameskip', default=1)
    ap.add_argument('--show', action='store_true')
    ap.add_argument('--log_level', default="info", type=str)
    args = ap.parse_args()

    levels = {
        "debug": 10,
        "info": 20,
        "warning": 30,
        "error": 40
    }

    log_level = levels[args.log_level]
    logging.basicConfig(
        format='%(asctime)s - %(levelname)s - %(message)s',
        level=log_level,
        datefmt='%y-%m-%d_%H:%M:%S'
    )
    main(args)
